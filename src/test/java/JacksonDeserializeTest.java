import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import models.ContactDetails;
import models.ImmutableProduct;
import models.ImmutableProductWithLombok;
import models.MutableProduct;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.io.IOException;
import java.io.InputStream;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;


public class JacksonDeserializeTest {
    @Test
    @DisplayName("Deserialize a json to a mutable object")
    public void deserializeToMutableObject() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");

        ObjectMapper mapper = new ObjectMapper();
        MutableProduct product = mapper.readValue(jsonFile, MutableProduct.class);

        MutableProduct expectedProduct = ExpectedObjectBuilder.buildMutableProduct();

        assertThat(product)
                .usingRecursiveComparison()
                .isEqualTo(expectedProduct);
    }

    @Test
    @DisplayName("Deserialize a json to an immutable object")
    public void deserializeToImmutableObject() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");

        ObjectMapper mapper = new ObjectMapper();
        ImmutableProduct product = mapper
                .registerModule(new ParameterNamesModule())
                .readValue(jsonFile, ImmutableProduct.class);

        ImmutableProduct expectedProduct = ExpectedObjectBuilder.buildImmutableProduct();

        assertThat(product)
                .usingRecursiveComparison()
                .isEqualTo(expectedProduct);
    }
    @Test
    @DisplayName("Deserialize a json to an immutable object that is generated by lombok")
    public void deserializeToImmutableWithLombok() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");

        ObjectMapper mapper = new ObjectMapper();

        ImmutableProductWithLombok product = mapper
                .registerModule(new ParameterNamesModule())
                .readValue(jsonFile, ImmutableProductWithLombok.class);

        // Please check how ImmutableProductWithLombok looks like
        ImmutableProductWithLombok expectedProduct = ExpectedObjectBuilder.buildImmutableProductWithLombok();

        assertThat(product)
                .usingRecursiveComparison()
                .isEqualTo(expectedProduct);
    }

    @Test
    @DisplayName("Deserialize a json with snake-case properties to an immutable object")
    public void deserializeSnakeCaseJsonToImmutableObject() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("contact_details.json");

        ObjectMapper mapper = new ObjectMapper();

        ContactDetails contactDetails = mapper
                .registerModule(new ParameterNamesModule())
                .setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
                .readValue(jsonFile, ContactDetails.class);

        ContactDetails expectedContactDetails = ExpectedObjectBuilder.buildContactDetails();

        assertThat(contactDetails)
                .usingRecursiveComparison()
                .isEqualTo(expectedContactDetails);
    }
}
