import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import models.*;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.InputStream;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;


public class JacksonDeserializeTest {
    @Test
    @DisplayName("Deserialize a JSON to a mutable object")
    public void deserializeJSONtoMutable() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");
        ObjectMapper mapper = new ObjectMapper();

        MutableProduct deserializedObject = mapper.readValue(jsonFile, MutableProduct.class);

        MutableProduct expectedObject = ExpectedObjectBuilder.buildMutableProduct();

        assertThat(deserializedObject)
                .usingRecursiveComparison()
                .isEqualTo(expectedObject);
    }

    @Test
    @DisplayName("Deserialize a JSON to an immutable object")
    public void deserializeJSONtoImmutableObject() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");
        ObjectMapper mapper = new ObjectMapper();

        ImmutableProduct deserializedObject = mapper
                .registerModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))
                .readValue(jsonFile, ImmutableProduct.class);

        ImmutableProduct expectedObject = ExpectedObjectBuilder.buildImmutableProduct();

        assertThat(deserializedObject)
                .usingRecursiveComparison()
                .isEqualTo(expectedObject);
    }

    @Test
    @DisplayName("Deserialize A JSON with extra properties to an immutable object")
    public void deserializeJSONWithExtraFieldsToImmutableObject() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");
        ObjectMapper mapper = new ObjectMapper();

        ImmutableProductWithMissingField deserializedObject = mapper
                .registerModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))
                .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
                .readValue(jsonFile, ImmutableProductWithMissingField.class);

        ImmutableProductWithMissingField expectedObject = ExpectedObjectBuilder
                .buildImmutableProductWithMissingFields();

        assertThat(deserializedObject)
                .usingRecursiveComparison()
                .isEqualTo(expectedObject);
    }

    @Test
    @DisplayName("Deserialize a JSON with snake_case properties to an immutable with camelCase properties")
    public void deserializeJSONWithSnakeCasePropertiesToImmutableObjectWithCamelCaseProperties() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("contact_details.json");
        ObjectMapper mapper = new ObjectMapper();

        ImmutableContactDetails deserializedObject = mapper
                .registerModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))
                .setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
                .readValue(jsonFile, ImmutableContactDetails.class);

        ImmutableContactDetails expectedObject = ExpectedObjectBuilder.buildImmutableContactDetails();

        assertThat(deserializedObject)
                .usingRecursiveComparison()
                .isEqualTo(expectedObject);
    }

    @Test
    @DisplayName("Deserialize a JSON with complex data structure to a custom/simple immutable object")
    public void deserializeJSONWithComplexDataStructureToSimpleImmutableObject() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("provider_configuration.json");
        ObjectMapper mapper = new ObjectMapper();

        ImmutableProviderConfiguration deserializedObject = mapper
                .registerModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))
                .setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
                .readValue(jsonFile, ImmutableProviderConfiguration.class);

        ImmutableProviderConfiguration expectedObject = ExpectedObjectBuilder
                .buildImmutableProviderConfiguration();

        assertThat(deserializedObject)
                .usingRecursiveComparison()
                .isEqualTo(expectedObject);
    }

    @Test
    @DisplayName("Deserialize a JSON to an immutable object generated by lombok")
    public void deserializeJSONToImmutableObjectWithLombok() throws IOException {
        InputStream jsonFile = getClass().getClassLoader().getResourceAsStream("product.json");
        ObjectMapper mapper = new ObjectMapper();

        ImmutableProductWithLombok deserializedObject = mapper
                .registerModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))
                .readValue(jsonFile, ImmutableProductWithLombok.class);

        ImmutableProductWithLombok expectedObject = ExpectedObjectBuilder
                .buildImmutableProductWithLombok();

        assertThat(deserializedObject)
                .usingRecursiveComparison()
                .isEqualTo(expectedObject);
    }
}
